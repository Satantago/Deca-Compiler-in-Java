class Math {
    float pi_major = 3.1415927;
    float pi_minor = -0.00000008742278;
    float pi_2 = 1.5707964;

    // SIN CHEBYSHEV coefficients
    float a0 = -0.10132118f;
    float a1 = 0.0066208798f;
    float a2 = -0.00017350505f;
    float a3 = 0.0000025222919f;
    float a4 = -0.000000023317787f;
    float a5 = 0.00000000013291342f;

    // SIN TAYLOR coefficients
    float S1  = -0.16666667; 
    float S2  =  0.008333334;
    float S3  = -1.984127e-4;
    float S4  =  2.7557314e-6;
    float S5  = -2.505076e-8;
    float S6  =  1.589691e-10;

    // ARCTAN TAYLOR coefficients
    float SS1  = -0.33333334; 
    float SS2  =  0.2; 
    float SS3  = -0.14285715;
    float SS4  =  0.11111111; 
    float SS5  = -0.09090909;
    float SS6  =  0.07692308;

    float x2, res; 

    // for reduction
    float x_etoile;
    int k, c;
    float c1 = 3.140625;
    float c2 = 9.67653589793e-4;

    // for newton's method
    float v;
    int i;

    // for ulp
    int min, max, middle;
    
    float _sin_chebyshev(float x) {
        x2 = x*x;
        res = (((((a5 * x2) + a4)*x2 + a3)*x2 + a2)*x2 + a1)*x2 + a0;
        return ((x - pi_major - pi_minor) *(x + pi_major + pi_minor) * res * x);
    }


    float _sin_taylor(float x) {
        x2 = x*x;
        res = 1 + x2*(S1+x2*(S2+x2*(S3+x2*(S4+x2*(S5+x2*(S6))))));
        res = res * x;
        return res;
    }


    float _reduce(float x) {
        k = (int) (x / (c1+c2));
        c = 1;
        if (k % 2 == 1) {
            c = -1;
        }
        return c*((x - k*c1) - k*c2);
    }

      int _reduce_k(float x) {
        k = (int) (x / (c1+c2));
        return k;
    }


    float sin(float x) {
        if (x < 0.0) {
            return -(sin(-x));
        }
        else if (x < 0.785398) {
            return _sin_taylor(x);
        }
        else {
            x_etoile = _reduce(x);
            return _sin_chebyshev(x_etoile);
        }
    }


    float cos(float x) {
        if (x > pi_major) {
            x_etoile = _reduce(x);
            k = _reduce_k(x);
            if (k%2 == 1) {
                c = -1;
            }
            else {
                c = 1;
            }
            return c*sin(pi_2 - x_etoile);
        }
        else {
            return sin(pi_2 - x);
        }
    }

     float _sqrt(float x) {
        v = 1.0;
        i = 10;
        while (i > 0) {
            v = ( v + (x / v) ) / 2;
            i = i - 1;
        }
        return v;
    }

    
     float atan(float x) {
        if (x < 0) {
            return -atan(-x);
        }
        else if (x == 1) {
            return 0.7853982;
        }
        else if (x < 0.35) {
            x2 = x*x;
            res = 1 + x2*(SS1+x2*(SS2+x2*(SS3+x2*(SS4+x2*(SS5+x2*(SS6))))));
            return res*x;
        }
        else if (0.35 < x && x < 1.25) {
            return 2 * atan(x / (1 + _sqrt(1 + x*x)));
        }
        else {
            return (pi_2 - atan(1/x));
        }
    }

    float asin(float x) {
        if (x < 0) {
            return -asin(-x);
        }
        if (x > 0.9) {
            return pi_2 - asin(_sqrt(1 - x*x));
        }
        else {
            v = 1.0;
            i = 10;
            while (i < 10) {
                v = v - ((sin(v) - x) / (cos(v)));
            }
            return v;
        }
    }
    
    float _pow(float x, int n) {
        if (n == 0){
            return 1;
        }
        else if (n % 2 == 0) {
            return _pow(x, n / 2) * _pow(x, n / 2);
        }
        else {
            return x * _pow(x, (n-1)/2) * _pow(x, (n-1)/2);
        }
    }

    float ulp(float x){
        if (x < 0) {return ulp(-x);}
        else if (x < _pow(2, -125)) {return _pow(2,-129);}
        else if (x > (1 - _pow(2, -24))*_pow(2, 128)) {return _pow(2, 104);}
        else {
            min = -125;
            max = 128;
            while (max - min > 1) {
                middle = (int) (max + min)/2;
                if (x >= _pow(2, middle)){
                    min = middle;
                }
                else{
                    max = middle;
                }
            }
            if (x == _pow(2, min)){
                return _pow(2,min-24);
            }
            else{
                return _pow(2,min-23);
            }
        }
    }
}
