DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:51) - verify program: start
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:27) - verify listClass: start
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:33) - verify listClass: end
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:29) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:44) - verify listdec: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:48) - verify listdec: end
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:36) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:54) - verify program: end
`> [1, 0] Program
   +> ListDeclClass [List with 0 elements]
   `> [1, 0] Main
      +> ListDeclVar [List with 2 elements]
      |  []> [2, 8] DeclVar
      |  ||  +> [2, 4] Identifier (int)
      |  ||  |  definition: type (builtin), type=int
      |  ||  +> [2, 8] Identifier (x)
      |  ||  |  definition: variable defined at [2, 8], type=int
      |  ||  `> NoInitialization
      |  []> [3, 10] DeclVar
      |      +> [3, 4] Identifier (float)
      |      |  definition: type (builtin), type=float
      |      +> [3, 10] Identifier (y)
      |      |  definition: variable defined at [3, 10], type=float
      |      `> NoInitialization
      `> ListInst [List with 4 elements]
         []> [4, 4] Print
         ||  `> ListExpr [List with 1 elements]
         ||     []> [4, 11] Multiply
         ||         type: float
         ||         +> ConvFloat
         ||         |  type: float
         ||         |  `> [4, 10] Identifier (x)
         ||         |     definition: variable defined at [2, 8], type=int
         ||         `> [4, 12] Identifier (y)
         ||            definition: variable defined at [3, 10], type=float
         []> [5, 4] Print
         ||  `> ListExpr [List with 1 elements]
         ||     []> [5, 11] Divide
         ||         type: float
         ||         +> ConvFloat
         ||         |  type: float
         ||         |  `> [5, 10] Identifier (x)
         ||         |     definition: variable defined at [2, 8], type=int
         ||         `> [5, 12] Identifier (y)
         ||            definition: variable defined at [3, 10], type=float
         []> [6, 4] Print
         ||  `> ListExpr [List with 1 elements]
         ||     []> [6, 11] Minus
         ||         type: float
         ||         +> ConvFloat
         ||         |  type: float
         ||         |  `> [6, 10] Identifier (x)
         ||         |     definition: variable defined at [2, 8], type=int
         ||         `> [6, 12] Identifier (y)
         ||            definition: variable defined at [3, 10], type=float
         []> [7, 4] Print
             `> ListExpr [List with 1 elements]
                []> [7, 11] Plus
                    type: float
                    +> ConvFloat
                    |  type: float
                    |  `> [7, 10] Identifier (x)
                    |     definition: variable defined at [2, 8], type=int
                    `> [7, 12] Identifier (y)
                       definition: variable defined at [3, 10], type=float
