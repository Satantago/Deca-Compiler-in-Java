DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:51) - verify program: start
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:27) - verify listClass: start
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:33) - verify listClass: end
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:29) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:44) - verify listdec: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:48) - verify listdec: end
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:36) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:54) - verify program: end
`> [11, 0] Program
   +> ListDeclClass [List with 0 elements]
   `> [11, 0] Main
      +> ListDeclVar [List with 1 elements]
      |  []> [12, 4] DeclVar
      |      +> [12, 0] Identifier (int)
      |      |  definition: type (builtin), type=int
      |      +> [12, 4] Identifier (x)
      |      |  definition: variable defined at [12, 4], type=int
      |      `> [12, 8] Initialization
      |         `> [12, 8] Int (1)
      |            type: int
      `> ListInst [List with 2 elements]
         []> [13, 0] IfThenElse
         ||  +> [13, 4] Equals
         ||  |  type: boolean
         ||  |  +> [13, 3] Identifier (x)
         ||  |  |  definition: variable defined at [12, 4], type=int
         ||  |  `> [13, 6] Int (1)
         ||  |     type: int
         ||  +> ListInst [List with 1 elements]
         ||  |  []> [14, 0] IfThenElse
         ||  |      +> [14, 3] BooleanLiteral (true)
         ||  |      |  type: boolean
         ||  |      +> ListInst [List with 1 elements]
         ||  |      |  []> [15, 0] Println
         ||  |      |      `> ListExpr [List with 1 elements]
         ||  |      |         []> [15, 8] StringLiteral (Ã§a marche)
         ||  |      |             type: string
         ||  |      `> [17, 0] IfThenElse
         ||  |         +> [17, 0] BooleanLiteral (true)
         ||  |         |  type: boolean
         ||  |         +> ListInst [List with 1 elements]
         ||  |         |  []> [18, 0] Println
         ||  |         |      `> ListExpr [List with 1 elements]
         ||  |         |         []> [18, 8] StringLiteral (non)
         ||  |         |             type: string
         ||  `> [21, 0] IfThenElse
         ||     +> [21, 10] Equals
         ||     |  type: boolean
         ||     |  +> [21, 8] Identifier (x)
         ||     |  |  definition: variable defined at [12, 4], type=int
         ||     |  `> [21, 13] Int (1)
         ||     |     type: int
         ||     +> ListInst [List with 1 elements]
         ||     |  []> [22, 0] Println
         ||     |      `> ListExpr [List with 1 elements]
         ||     |         []> [22, 8] StringLiteral (non)
         ||     |             type: string
         []> [25, 0] Println
             `> ListExpr [List with 1 elements]
                []> [25, 8] StringLiteral (completement)
                    type: string
