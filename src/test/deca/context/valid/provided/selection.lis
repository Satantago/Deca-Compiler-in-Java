DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:51) - verify program: start
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:27) - verify listClass: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:49) - verify listdec: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.ListDeclField.verifyListDeclField(ListDeclField.java:53) - verify listdec: end
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:56) - verify listmeth: start
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:53) - verify listdec: start
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:58) - verify listdec: end
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:44) - verify listdec: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:48) - verify listdec: end
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:53) - verify listdec: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.ListDeclParam.verifyListDeclParam(ListDeclParam.java:58) - verify listdec: end
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:44) - verify listdec: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:48) - verify listdec: end
DEBUG fr.ensimag.deca.tree.ListDeclMethod.verifyListDeclMethod(ListDeclMethod.java:60) - verify listmeth: end
DEBUG fr.ensimag.deca.tree.ListDeclClass.verifyListClass(ListDeclClass.java:33) - verify listClass: end
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:29) - verify Main: start
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:44) - verify listdec: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:200) - verify verftype non terminal: start
DEBUG fr.ensimag.deca.tree.Identifier.verifyType(Identifier.java:207) - verify verftype non terminal: sortie
DEBUG fr.ensimag.deca.tree.ListDeclVar.verifyListDeclVariable(ListDeclVar.java:48) - verify listdec: end
DEBUG fr.ensimag.deca.tree.Main.verifyMain(Main.java:36) - verify Main: end
DEBUG fr.ensimag.deca.tree.Program.verifyProgram(Program.java:54) - verify program: end
`> [1, 0] Program
   +> ListDeclClass [List with 1 elements]
   |  []> [1, 0] DeclClass
   |      +> [1, 6] Identifier (A)
   |      |  definition: type defined at [1, 6], type=A
   |      +> [1, 0] Identifier (Object)
   |      |  definition: type (builtin), type=Object
   |      +> ListDeclField [List with 1 elements]
   |      |  []> [2, 5] [visibility=PUBLIC] DeclField
   |      |      +> [2, 1] Identifier (int)
   |      |      |  definition: type (builtin), type=int
   |      |      +> [2, 5] Identifier (x)
   |      |      |  definition: field defined at [2, 5], type=int
   |      |      `> NoInitialization
   |      `> ListDeclMethod [List with 2 elements]
   |         []> [3, 1] DeclMethod
   |         ||  +> [3, 1] Identifier (int)
   |         ||  |  definition: type (builtin), type=int
   |         ||  +> [3, 5] Identifier (getX)
   |         ||  |  definition: method defined at [3, 1], type=int
   |         ||  +> ListDeclParam [List with 0 elements]
   |         ||  `> [3, 12] MethodBody
   |         ||     +> ListDeclVar [List with 0 elements]
   |         ||     `> ListInst [List with 1 elements]
   |         ||        []> [3, 13] Return
   |         ||            `> [3, 24] Selection
   |         ||               type: int
   |         ||               +> [3, 20] This
   |         ||               |  type: A
   |         ||               `> [3, 25] Identifier (x)
   |         ||                  definition: field defined at [2, 5], type=int
   |         []> [4, 1] DeclMethod
   |             +> [4, 1] Identifier (void)
   |             |  definition: type (builtin), type=void
   |             +> [4, 6] Identifier (setX)
   |             |  definition: method defined at [4, 1], type=void
   |             +> ListDeclParam [List with 1 elements]
   |             |  []> [4, 11] DeclParam
   |             |      +> [4, 11] Identifier (int)
   |             |      |  definition: type (builtin), type=int
   |             |      `> [4, 15] Identifier (x)
   |             |         definition: parameter defined at [4, 11], type=int
   |             `> [4, 18] MethodBody
   |                +> ListDeclVar [List with 0 elements]
   |                `> ListInst [List with 1 elements]
   |                   []> [4, 27] Assign
   |                       type: int
   |                       +> [4, 23] Selection
   |                       |  type: int
   |                       |  +> [4, 19] This
   |                       |  |  type: A
   |                       |  `> [4, 25] Identifier (x)
   |                       |     definition: field defined at [2, 5], type=int
   |                       `> [4, 29] Identifier (x)
   |                          definition: parameter defined at [4, 11], type=int
   `> [7, 0] Main
      +> ListDeclVar [List with 1 elements]
      |  []> [8, 3] DeclVar
      |      +> [8, 1] Identifier (A)
      |      |  definition: type defined at [1, 6], type=A
      |      +> [8, 3] Identifier (a)
      |      |  definition: variable defined at [8, 3], type=A
      |      `> [8, 7] Initialization
      |         `> [8, 7] new
      |            type: A
      |            `> [8, 11] Identifier (A)
      |               definition: type defined at [1, 6], type=A
      `> ListInst [List with 3 elements]
         []> [9, 8] MethodCall
         ||  type: void
         ||  +> [9, 1] Identifier (a)
         ||  |  definition: variable defined at [8, 3], type=A
         ||  +> [9, 3] Identifier (setX)
         ||  |  definition: method defined at [4, 1], type=void
         ||  `> ListExpr [List with 1 elements]
         ||     []> [9, 8] Int (2)
         ||         type: int
         []> [10, 1] Println
         ||  `> ListExpr [List with 1 elements]
         ||     []> [10, 10] Selection
         ||         type: int
         ||         +> [10, 9] Identifier (a)
         ||         |  definition: variable defined at [8, 3], type=A
         ||         `> [10, 11] Identifier (x)
         ||            definition: field defined at [2, 5], type=int
         []> [11, 1] Println
             `> ListExpr [List with 1 elements]
                []> [11, 16] MethodCall
                    type: int
                    +> [11, 9] Identifier (a)
                    |  definition: variable defined at [8, 3], type=A
                    +> [11, 11] Identifier (getX)
                    |  definition: method defined at [3, 1], type=int
                    `> ListExpr [List with 0 elements]
